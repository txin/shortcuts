;;============================== Package =======================================
(require 'package)
;;(require 'use-package)
;;(use-package org :ensure org-plus-contrib)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;;(require 'package) (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'load-path "~/.emacs.d/lisp/")
(package-initialize)
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
;; (setq langtool-language-tool-jar "~/package/LanguageTool-5.0/languagetool-commandline.jar")
;; (require 'langtool)
;; (setq langtool-bin "/snap/bin/languagetool")
(require 'server)
(unless (server-running-p)
  (server-start))
(setq auto-package-update-delete-old-versions t)
(setq load-path (cons (expand-file-name "/dir/with/cmake-mode") load-path))
(require 'cmake-mode)

;; open the shell in current window
(add-to-list 'display-buffer-alist
             '("^\\*shell\\*$" . (display-buffer-same-window)))

(global-wakatime-mode)
(setq wakatime-api-key "861db66c-29cc-43da-a1a5-42cc7c52b118")
(setq wakatime-cli-path "/usr/local/bin/wakatime")
(setq python-shell-interpreter "python3")

;;============================== Setup Font Size and Background Color ==========
(setq term-default-bg-color nil)
(if (display-graphic-p)
    (progn
      ;;(set-face-attribute 'default nil :font "Inconsolata" :height 140))
      (set-face-attribute 'default nil :font "Fira Code" :height 130))
  (set-face-attribute 'default nil :height 130))

;;============================= Language Tool ==================================
(require 'grammarly)
;; (require 'use-package)
;; (use-package lsp-grammarly
;;   :ensure t
;;   :hook (text-mode . (lambda ()
;;                        (require 'lsp-grammarly)
;;                        (lsp))))  ; or lsp-deferred
(setq grammarly-username "titian.tang@gmail.com")  ; Your Grammarly Username
(setq grammarly-password "Titian322")
(require 'flycheck-grammarly)
(setq flycheck-grammarly-check-time 0.8)
;;============================= Chinese ========================================
;;(require 'pyim)
;;(require 'pyim-basedict) ; 拼音词库设置，五笔用户 *不需要* 此行设置
;;(pyim-basedict-enable)   ; 拼音词库，五笔用户 *不需要* 此行设置

;; turn off the bell sound2
(setq ring-bell-function 'ignore)
;;============================= God Mode =======================================
(global-set-key (kbd "<escape>") 'god-local-mode)
;;(setq god-exempt-major-modes nil)
;;(setq god-exempt-predicates nil)

;;============================= Load Company Mode for All Buffers ==============
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-hook 'after-init-hook 'global-company-mode)

;;use org mode for eml files (useful for thunderbird plugin)
(require 'doom-modeline)
(doom-modeline-mode 1)
;;(require 'ox-taskjuggler)
;;(require 'fcitx)
;;(require 'org-ref)

;;============================== Random Themes =================================
;; (require 'rand-theme)
;; (setq rand-theme-wanted '(gruvbox-light-medium gruvbox cyberpunk paper))
;; (setq rand-theme-unwanted '(leuven light-blue))
;; (rand-theme)

;;============================== Dark Themes ===================================
;;------------------------------ Rotation --------------------------------------
;;(load-theme 'flatui-dark t) ;; MON
;;(load-theme 'cyberpunk t) ;; TUE
;;(load-theme 'cyberpunk-2019 t) ;; TUE
;;(load-theme 'kaolin-bubblegum t)
;;(load-theme 'kaolin-galaxy t)
;;(load-theme 'kaolin-aurora t)
;;(load-theme 'kaolin-valley-light t)
;;(load-theme 'kaolin-valley-dark t)
;;(load-theme 'kaolin-light t)
;;(load-theme 'eziam-dark t)
;;(load-theme 'misterioso t) ;; WED
;;(require 'tron-theme) ;; THU
;;(load-theme 'tangotango t)
;;(load-theme 'cherry-blossom t) ;; FRI
;;(load-theme 'soothe t) ;; SAT
;;(load-theme 'darktooth t) ;; SAT
;;(load-theme 'doom-peacock t) ;; SUN
;;(load-theme 'purple-haze t)
;;(load-theme 'challenger-deep t)
;;(load-theme 'naysayer t)
;;(load-theme 'gotham t)
;;(load-theme 'warm-night t)
;;(load-theme 'hickey t)
;;(load-theme 'granger t)
;;(load-theme 'brin t)
;;(load-theme 'fogus t)
;;------------------------------ Template --------------------------------------
;;(load-theme 'gruvbox t)
;;(load-theme 'deeper-blue t)
;;(load-theme 'doom-one t)
;;(load-theme 'avk-darkblue-yellow t)
;;(load-theme 'clues t)
;;(load-theme 'lab-dark t)
;;(load-theme 'darkokai t)
;;(load-theme 'flatland-black t)
;;(load-theme 'solarized t)
;;(load-theme 'subatomic t)
;;(load-theme 'dracula t)
;;(load-theme 'lavender t)
;;(load-theme 'chocolate t)
;;(load-theme 'boron t)
;;(load-theme 'lavenderless t)
;;(load-theme 'spacemacs-dark t)
(load-theme 'srcery t)
;;(load-theme 'apropospriate-dark t)

;;============================== Light Themes ==================================
;;(load-theme 'silkworm t)
;;(load-theme 'spacemacs-light t)
;;(load-theme 'apropospriate-light t)
;;(load-theme 'gruvbox-light-soft t)
;;(load-theme 'gruvbox-light-medium t)
;;(load-theme 'tommyh t)
;;(load-theme 'paper t)
;;(load-theme 'avk-daylight 'soft-stone t)
;;(load-theme 'hydandata-light t)
;;(load-theme 'flatui t)
;;(load-theme 'moe-light t)
(add-to-list 'auto-mode-alist '("\\.eml\\'" . org-mode))

;;============================== Org Mode ======================================
(require 'org-install)
(require 'org-habit)
(eval-after-load 'org '(require 'org-pdfview))

(defun saintaardvark-org-clock-todays-total ()
  "Display total minutes clocked into org-mode for today."
  (interactive)
  (save-excursion
    (set-buffer "test.org")
    (format " Today's total: %s " (org-minutes-to-clocksum-string (org-clock-sum-today)))))

;; Create tags hierarchy
(setq org-tag-alist '((:startgrouptag)
                      ("WORK" . ?w)
                      (:grouptags)
                      ("CLASS" . ?c)
                      (:endgrouptag)
                      ("PERSONAL" . ?p)
                      ("LEARN" . ?l)
                      (:startgrouptag)
                      ("READ")
                      (:grouptags)
                      ("BOOK" . ?b)
                      ("PAPER" . ?r)
                      ("ARTICLE" . ?t)
                      (:endgrouptag)
                      ("ERRANDS" . ?e)))

(setq org-agenda-custom-commands
      '(("u" todo "WORK" nil)               ;; (1)
        ("g" "Super agenda group" agenda
         (org-super-agenda-mode)
         ((org-super-agenda-groups
               '((:auto-group t))))
          (org-agenda-list))
        ("c" "Super Agenda" agenda
         (org-super-agenda-mode)
         ((org-super-agenda-groups
           '((:name "Today"
                    :time-grid t
                    :scheduled today
                    :and (:priority "A"
                                    :tag "WORK"
                                    :todo "NEXT"))          
             (:name "Important"
                    :and (:priority "A"
                                    :todo "NEXT"))
             (:name "Quick Picks"
                    :effort< "00:30")
             (:priority<= "B"
                          :order 1)
             )))
         (org-agenda nil "a"))))

(setq org-global-properties  '(("Effort_ALL". "0 0:10 0:20 0:30 0:40 0:50 1:00 1:30 2:00 3:00 4:00 5:00 10:00 ")))

(setq org-refile-targets
      '(("planner.org" :maxlevel . 1)))

;;============================== AUCTeX Mode ===================================
;; Outline-minor-mode

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(setq-default Tex-engine 'xetex)
(setq-default TeX-PDF-mode t)
(setq TeX-source-correlate-mode t)
(setq TeX-source-correlate-start-server t)
(setq TeX-view-program-selection '((output-pdf "Okular")))
(add-hook 'TeX-mode-hook
          (lambda () (TeX-fold-mode 1)
            (outline-minor-mode 1)))

;; (setq TeX-view-program-selection
;;       '((output-dvi "DVI Viewer")
;;         (output-pdf "Okular")
;;         (output-html "Google Chrome")))


(add-hook 'LaTeX-mode-hook (lambda () (abbrev-mode +1)))
;;(provide 'auctex-config)
(add-hook 'LaTeX-mode-hook (lambda () (outline-minor-mode 1)))
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'focus-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(global-unset-key "\C-o")

;;============================== General Settings ==============================
(setq auto-window-vscroll nil)

(global-eldoc-mode -1)
;; disable backup
(setq backup-inhibited t)
;; disable toolbar
(tool-bar-mode -1)
;; disable scrollbar
(scroll-bar-mode -0)
;; disable menubar
(menu-bar-mode -1)
(setq-default indent-tabs-mode nil)
(setq c-default-style "BSD"
      c-basic-offset 4)
(setq-default comment-indent-new-line)
(setq column-number-mode t)
(setq python-indent-offset 4)
;;(add-hook 'python-mode-hook 'guess-style-guess-tabs-mode)
;;(add-hook 'python-mode-hook (lambda ()
;;                            (guess-style-guess-tab-width)))

(add-hook 'python-mode-hook
      (lambda ()
        (setq indent-tabs-mode nil)
        (setq python-indent 4)
        (setq tab-width 4))
      (untabify (point-min) (point-max)))
;; brackets
(electric-pair-mode 1)
;; go to last chang
;;(autoload 'goto-last-change "goto-last-change"
;;  "Set point to the position of the last change." t)

(global-set-key [(control ?.)] 'goto-last-change)
(global-set-key [(control ?,)] 'goto-last-change-reverse)

(setq-default fill-column 80)
(setq text-mode-hook 'turn-on-auto-fill)
(setq default-major-mode 'text-mode)

;; define unfill paragraph
;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)

;; define backtab
(global-set-key (kbd "<backtab>") 'un-indent-by-removing-4-spaces)
(defun un-indent-by-removing-4-spaces ()
  "remove 4 spaces from beginning of of line"
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (looking-at "^    ")
        (replace-match "")))))

(setq recentf-max-menu-items 10)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

(setq company-idle-delay 0)
(setq company-tooltip-align-annotations t)
(setq company-backends '(company-elisp 
                         company-ropemacs
                         company-gtags
                         company-keywords
                         company-files
                         company-irony
                         company-c-headers
                         company-dabbrev-code
                         company-dabbrev
                         ))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(Linum-format "%7i ")
 '(custom-safe-themes
   '("713f898dd8c881c139b62cf05b7ac476d05735825d49006255c0a31f9a4f46ab" "a77ced882e25028e994d168a612c763a4feb8c4ab67c5ff48688654d0264370c" "274fa62b00d732d093fc3f120aca1b31a6bb484492f31081c1814a858e25c72e" "d1cc05d755d5a21a31bced25bed40f85d8677e69c73ca365628ce8024827c9e3" "392395ee6e6844aec5a76ca4f5c820b97119ddc5290f4e0f58b38c9748181e8d" "f11e219c9d043cbd5f4b2e01713c2c24a948a98bed48828dc670bd64ae771aa1" "5a0eee1070a4fc64268f008a4c7abfda32d912118e080e18c3c865ef864d1bea" "70f5a47eb08fe7a4ccb88e2550d377ce085fedce81cf30c56e3077f95a2909f2" "abdb1863bc138f43c29ddb84f614b14e3819982936c43b974224641b0b6b8ba4" "7f89ec3c988c398b88f7304a75ed225eaac64efa8df3638c815acc563dfd3b55" "aaffceb9b0f539b6ad6becb8e96a04f2140c8faa1de8039a343a4f1e009174fb" "3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" "fd3c7bd752f48dcb7efa5f852ef858c425b1c397b73851ff8816c0580eab92f1" default))
 '(fci-rule-character-color "#202020")
 '(fringe-mode 4 nil (fringe))
 '(inhibit-startup-screen t)
 '(main-line-color1 "#1E1E1E")
 '(main-line-color2 "#111111")
 '(main-line-separator-style 'chamfer)
 '(org-agenda-files
   '("~/Dropbox/org/planner.org" "~/Dropbox/org/work.org" "~/Dropbox/org/reading.org" "~/Dropbox/org/life.org"))
 '(package-selected-packages
   '(rust-mode lavender-theme sublime-themes ujelly-theme wakatime-mode flycheck-grammarly use-package lsp-grammarly lsp-latex lsp-mode kaolin-themes apropospriate-theme gotham-theme writeroom-mode warm-night-theme tj3-mode tangotango-theme subatomic-theme srcery-theme spotify spacemacs-theme soothe-theme rand-theme pyim-basedict purple-haze-theme pretty-symbols paper-theme org-time-budgets org-pdfview org-bullets org-analyzer nyan-mode moe-theme markdown-mode lenlen-theme lavenderless-theme langtool hydandata-light-theme hemisu-theme gruvbox-theme god-mode ggtags foggy-night-theme focus flatui-theme flatui-dark-theme doom-themes doom-modeline darktooth-theme darkokai-theme cyberpunk-theme cyberpunk-2019-theme company-irony-c-headers company-irony company-dict company-auctex cmake-mode clues-theme chocolate-theme cherry-blossom-theme berrys-theme avk-emacs-themes ample-theme academic-phrases))
 '(powerline-color1 "#1E1E1E")
 '(powerline-color2 "#111111")
 '(wakatime-python-bin nil))

;;========================= Org-Mode ===========================================
(setq writeroom-width 90)

(require 'org)
(require 'ox-md) ;; org-markdown

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-list-allow-alphabetical t)
(setq org-src-fontify-natively t)

;; (setq org-agenda-files (file-expand-wildcards "~/Dropbox/org/*.org"))
;; (setq org-agenda-files (apply 'append '("~/Dropbox/org/work.org"
;;                                         "~/Dropbox/org/planner.org")))

(setq org-default-notes-file (expand-file-name "~/Dropbox/org/inbox.org"))
;;(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
(add-hook 'org-mode-hook (lambda ()
                           (org-indent-mode t)
                           (flyspell-mode t)
                           ;;(emojify-mode t)
                           ))

(define-key global-map "\C-cc" 'org-capture)
;;(setq org-dashboard-files '("/home/txin/Dropbox/org"))

;; org-dashboard 
(defun my/org-dashboard-filter (entry)
  (and (> (plist-get entry :progress-percent) 0)
       (< (plist-get entry :progress-percent) 100)
       (not (member "archive" (plist-get entry :tags)))))

(setq org-dashboard-filter 'my/org-dashboard-filter)
(add-hook 'org-mode-hook 'org-bullets-mode)
(setq org-duration-format (quote h:mm))
;; customized

(setq org-hide-emphasis-markers t)
(setq org-emphasis-alist
      '(("/" (:foreground "deep sky blue"))
        ("_" underline)
        ("*" (bold :foreground "Orange"))
        ("=" (:background "maroon" :foreground "white"))
        ("~" (:background "deep sky blue" :foreground "MidnightBlue"))
        ("+" (:strike-through t))))
            
(setq org-agenda-span 1)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT
  STRING)))

;; org-alert
(setq alert-default-style 'libnotify)
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" 
                                    "WAITING(w)" "APPT(a)" "|"
                                    "DONE(d)"
                                    "CANCELLED(c)" "DEFERRED(f)")))
(setq reftex-default-bibliography '("~/Dropbox/zotero_lib/library.bib"))
;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Dropbox/zotero_lib/notes.org"
      org-ref-default-bibliography '("~/Dropbox/zotero_lib/library.bib")
      org-ref-pdf-directory "~/Dropbox/zotero_lib/bibtex-pdfs/")

(setq bibtex-completion-bibliography "~/Dropbox/zotero_lib/library.bib"
      bibtex-completion-library-path "~/Dropbox/zotero_lib/bibtex-pdfs"
      bibtex-completion-notes-path "~/Dropbox/zotero_lib/helm-bibtex-notes")
(setq bibtex-completion-pdf-field "file")
(setq org-columns-default-format "#+COLUMNS: %45ITEM %TODO %3PRIORITY %EFFORT(effort){:} %CLOCKSUM(clocksum)")


;;============================== ggtags ========================================
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

;;(provide 'fira-code-mode)
(require 'org-bullets)
(setq org-startup-folded t)

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/planner.org" "Inbox")
         "* TODO [#C] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t
         \"+0d\"))\n- %i%a")
        ("n" "Note" entry (file+headline "~/Dropbox/org/work.org" "Inbox")
         "* %?\nEntered on %U\n- %i%a")
        ("s" "Someday" entry (file+headline "~/Dropbox/org/planner.org" "Someday")
         "* TODO [#C] %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t
         \"+14d\"))\n- %i%a")
        ("w" "Waiting" entry (file+headline "~/Dropbox/org/planner.org" "Waiting")
         "* TODO [#C] %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t
         \"+3d\"))\n- %i%a")
        ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("P" "process-soon" entry (file+headline "~/Dropbox/org/planner.org" "Inbox")
         "* TODO %a %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))")))

;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;normal todo list
(setq org-agenda-todo-ignore-deadlines (quote all))
(setq org-agenda-todo-ignore-scheduled (quote all))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:background nil))))
 '(org-column ((t (:background "#d3d3e7" :height 1.0 :font "Fira Code")))))

(setq default-input-method "pyim")
(put 'set-goal-column 'disabled nil)
