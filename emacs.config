;;============================== Package =======================================
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'load-path "~/.emacs.d/lisp/")
(package-initialize)
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(require 'server)
(unless (server-running-p)
  (server-start))

;;============================= God Mode =======================================
(global-set-key (kbd "<escape>") 'god-local-mode)
;;(setq god-exempt-major-modes nil)
;;(setq god-exempt-predicates nil)

;;============================= Load Company Mode for All Buffers ==============
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-hook 'after-init-hook 'global-company-mode)
;;use org mode for eml files (useful for thunderbird plugin)
(require 'doom-modeline)
(doom-modeline-mode 1)
(require 'fcitx)
(require 'org-ref)

;;============================== Random Themes =================================
;; (require 'rand-theme)
;; (setq rand-theme-wanted '(gruvbox-light-medium gruvbox cyberpunk paper))
;; (setq rand-theme-unwanted '(leuven light-blue))
;; (rand-theme)

;;============================== Dark Themes ===================================
;;(load-theme 'flatui-dark t) ;; MON
;;(load-theme 'cyberpunk t) ;; TUE
;;(load-theme 'misterioso t) ;; WED
;;(load-theme 'dracula t) ;; THU
(require 'tron-theme) ;; THU
;;(load-theme 'cherry-blossom t) ;; FRI
;;(load-theme 'soothe t) ;;SAT
;;(load-theme 'doom-peacock t) ;; SUN

;;(load-theme 'gruvbox t)
;;(load-theme 'deeper-blue t)
;;(load-theme 'doom-one t)
;;(load-theme 'avk-darkblue-yellow t)
;;(load-theme 'apropospriate-dark t)
;;(load-theme 'clues t)
;;(load-theme 'lab-dark t)
;;(load-theme 'flatland-black t)
;;(load-theme 'solarized t)
;;(load-theme 'subatomic t)

;;============================== Light Themes ==================================
;;(load-theme 'gruvbox-light-soft t)
;;(load-theme 'gruvbox-light-medium t)
;;(load-theme 'tommyh t)
;;(load-theme 'paper t)
;;(load-theme 'avk-dayl 'soft-stone t)
;;(load-theme 'hydandata-light t)
;;(load-theme 'hemisu t)
;;(load-theme 'flatui t)
;;(load-theme 'lenlen t)

;;============================== Setup Font Size and Background Color ==========
(setq term-default-bg-color nil)
(if (display-graphic-p)
    (progn
      ;;(set-face-attribute 'default nil :font "Inconsolata" :height 140))
      (set-face-attribute 'default nil :font "Fira Code" :height 130))
  (set-face-attribute 'default nil :height 130))

(add-to-list 'auto-mode-alist '("\\.eml\\'" . org-mode))

;;============================== Org Mode ======================================
(require 'org-install)
(require 'org-habit)
(eval-after-load 'org '(require 'org-pdfview))


;; Create tags hierarchy
(setq org-tag-alist '((:startgrouptag)
                      ("WORK" . ?w)
                      (:grouptags)
                      ("KNN" . ?n)
                      ("ACNS" . ?a)
                      ("CLASS" . ?c)
                      (:endgrouptag)
                      ("PERSONAL" . ?p)
                      ("LEARN" . ?l)
                      (:startgrouptag)
                      ("READ")
                      (:grouptags)
                      ("BOOK" . ?b)
                      ("PAPER" . ?r)
                      ("ARTICLE" . ?t)
                      (:endgrouptag)
                      ("SASHA" . ?s)
                      ("@ERRANDS" . ?e)))

(setq org-agenda-custom-commands
      '(("u" todo "WORK" nil)               ;; (1)
        ("g" "Super agenda group" agenda
         (org-super-agenda-mode)
         ((org-super-agenda-groups
               '((:auto-group t))))
          (org-agenda-list))
        ("c" "Super Agenda" agenda
         (org-super-agenda-mode)
         ((org-super-agenda-groups
           '((:name "Today"
                    :time-grid t
                    :scheduled today
                    :and (:priority "A"
                                    :tag "WORK"
                                    :todo "NEXT"))          
             (:name "Important"
                    :and (:priority "A"
                                    :todo "NEXT"))
             (:name "Quick Picks"
                    :effort< "00:30")
             (:priority<= "B"
                          :order 1)
             )))
         (org-agenda nil "a"))))

(setq org-global-properties  '(("Effort_ALL". "0 0:10 0:20 0:30 0:40 0:50 1:00 1:30 2:00 3:00 4:00 5:00 10:00 ")))

;;============================== AUCTeX Mode ===================================
;; Outline-minor-mode
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(setq-default Tex-engine 'xetex)
(setq-default TeX-PDF-mode t)
(setq-default TeX-source-correlate-mode t)
(setq-default TeX-source-correlate-start-server t)

(add-hook 'TeX-mode-hook
          (lambda () (TeX-fold-mode 1)
            (outline-minor-mode 1)))

;(add-to-list 'TeX-fold-env-spec-list (quote (("[par]" ("par")))))
;(add-to-list 'TeX-fold-env-spec-list (quote (("[figure]" ("figure")))))
;(setq 'TeX-fold-math-spec-list '())

(setq TeX-view-program-list
       '(("DVI Viewer" "evince %o")
         ("PDF Viewer" "evince %o")
         ("Google Chrome" "google-chrome %o")))

(setq TeX-view-program-selection
      '((output-dvi "DVI Viewer")
        (output-pdf "Evince")
        (output-html "Google Chrome")))

(add-hook 'LaTeX-mode-hook (lambda () (abbrev-mode +1)))
(provide 'auctex-config)
(add-hook 'LaTeX-mode-hook (lambda () (outline-minor-mode 1)))
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(global-unset-key "\C-o")

;;============================== General Settings ==============================
(global-eldoc-mode -1)
;; disable backup
(setq backup-inhibited t)
;; disable toolbar
(tool-bar-mode -1)
;; disable scrollbar
(scroll-bar-mode -0)
;; disable menubar
(menu-bar-mode -1)
(setq-default indent-tabs-mode nil) 
(setq c-default-style "BSD"
      c-basic-offset 4)
(setq-default comment-indent-new-line)
(setq column-number-mode t)
;; brackets
(electric-pair-mode 1)
;; go to last chang
(autoload 'goto-last-change "goto-last-change"
  "Set point to the position of the last change." t)
(global-set-key "\C-x\C-\\" 'goto-last-change)

(require 'fill-column-indicator)
(setq-default fill-column 80)
(setq text-mode-hook 'turn-on-auto-fill)
(setq default-major-mode 'text-mode)

;; define unfill paragraph
;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
;; Handy key definition
(define-key global-map "\M-Q" 'unfill-paragraph)

;; define backtab
(global-set-key (kbd "<backtab>") 'un-indent-by-removing-4-spaces)
(defun un-indent-by-removing-4-spaces ()
  "remove 4 spaces from beginning of of line"
  (interactive)
  (save-excursion
    (save-match-data
      (beginning-of-line)
      ;; get rid of tabs at beginning of line
      (when (looking-at "^\\s-+")
        (untabify (match-beginning 0) (match-end 0)))
      (when (looking-at "^    ")
        (replace-match "")))))

(setq recentf-max-menu-items 10)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)

;; == irony-mode ==
(use-package irony
  :ensure t
  :defer t
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  :config
  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  )

(setq company-idle-delay 0)
(setq company-tooltip-align-annotations t)
(setq company-backends '(company-elisp 
                         company-ropemacs
                         company-gtags
                         company-keywords
                         company-files
                         company-irony
                         company-c-headers
                         company-dabbrev-code
                         company-dabbrev
                         ))

;;========================= Org-Mode ===========================================
(require 'org)
(require 'ox-md) ;; org-markdown

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)
(setq org-list-allow-alphabetical t)
(setq org-src-fontify-natively t)


;; (setq org-agenda-files (file-expand-wildcards "~/Dropbox/org/*.org"))
;; (setq org-agenda-files (apply 'append '("~/Dropbox/org/work.org"
;;                                         "~/Dropbox/org/planner.org")))

(setq org-default-notes-file (expand-file-name "~/Dropbox/org/inbox.org"))
(add-hook 'org-mode-hook 'turn-on-org-cdlatex)
(add-hook 'org-mode-hook (lambda ()
                           (org-indent-mode t)
                           (flyspell-mode t)
                           (emojify-mode t)
                           ))

(define-key global-map "\C-cc" 'org-capture)
;;(setq org-dashboard-files '("/home/txin/Dropbox/org"))
(add-hook 'org-mode-hook 'org-bullets-mode)
(setq org-duration-format (quote h:mm))
;; customized

(setq org-hide-emphasis-markers t)
(setq org-emphasis-alist
      '(("/" (:foreground "deep sky blue"))
        ("_" underline)
        ("*" (bold :foreground "Orange"))
        ("=" (:background "maroon" :foreground "white"))
        ("~" (:background "deep sky blue" :foreground "MidnightBlue"))
        ("+" (:strike-through t))))
            
(setq org-agenda-span 1)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT
  STRING)))

;; org-alert
(setq alert-default-style 'libnotify)
(setq org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" 
                                    "WAITING(w)" "APPT(a)" "|"
                                    "DONE(d)"
                                    "CANCELLED(c)" "DEFERRED(f)")))
(setq reftex-default-bibliography '("~/Dropbox/zotero_lib/library.bib"))
;; see org-ref for use of these variables
(setq org-ref-bibliography-notes "~/Dropbox/zotero_lib/notes.org"
      org-ref-default-bibliography '("~/Dropbox/zotero_lib/library.bib")
      org-ref-pdf-directory "~/Dropbox/zotero_lib/bibtex-pdfs/")

(setq bibtex-completion-bibliography "~/Dropbox/zotero_lib/library.bib"
      bibtex-completion-library-path "~/Dropbox/zotero_lib/bibtex-pdfs"
      bibtex-completion-notes-path "~/Dropbox/zotero_lib/helm-bibtex-notes")
(setq bibtex-completion-pdf-field "file")
(setq org-columns-default-format "#+COLUMNS: %45ITEM %TODO %3PRIORITY %EFFORT(effort){:} %CLOCKSUM(clocksum)")

;;============================== ggtags ========================================
(require 'ggtags)
(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (ggtags-mode 1))))

(define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
(define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
(define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
(define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
(define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
(define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
(define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)

(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
          (width (string-width s))
          (prefix ())
          (suffix '(?\s (Br . Br)))
          (n 1))
     (while (< n width)
       (setq prefix (append prefix '(?\s (Br . Bl))))
       (setq n (1+ n)))
     (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "x" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)
(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)
(require 'org-bullets)

;;======================= Email Configuration ==================================
;; example configuration for mu4e
;; make sure mu4e is in your load-path
(require 'mu4e)
(setq mu4e-get-mail-command "offlineimap -o"
      mu4e-update-interval 300)
;; use mu4e for e-mail in emacs
(setq mail-user-agent 'mu4e-user-agent)
(setq mu4e-maildir "/home/txin/Maildir/Office365")
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)

(require 'smtpmail)
;;(setq smtpmail-stream-type 'starttls)
(setq mu4e-sent-folder   "/Sent")
(setq mu4e-drafts-folder "/Drafts")
(setq mu4e-trash-folder  "/Trash")
(setq mu4e-refile-folder "/Archives.2019")

;; enable inline images
;;(setq mu4e-view-show-images t)
;;(setq mu4e-view-prefer-html t)

(setq
 message-send-mail-function   'smtpmail-send-it
 user-mail-address "email_address"
 smtpmail-default-smtp-server "smtp.office365.com"
 smtpmail-smtp-server         "smtp.office365.com"
 smtp-mail-service 587 )

(require 'org-mu4e)

(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/Dropbox/org/planner.org" "Inbox")
         "* TODO [#C] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t
         \"+0d\"))\n- %i%a")
        ("n" "Note" entry (file+headline "~/Dropbox/org/work.org" "Inbox")
         "* %?\nEntered on %U\n- %i%a")
        ("s" "Someday" entry (file+headline "~/Dropbox/org/planner.org" "Someday")
         "* TODO [#C] %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t
         \"+14d\"))\n- %i%a")
        ("w" "Waiting" entry (file+headline "~/Dropbox/org/planner.org" "Waiting")
         "* TODO [#C] %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t
         \"+3d\"))\n- %i%a")
        ("j" "Journal" entry (file+datetree "~/Dropbox/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")
        ("P" "process-soon" entry (file+headline "~/Dropbox/org/planner.org" "Inbox")
         "* TODO %a %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))")))

(setq   mu4e-maildir-shortcuts
    '(("/Archives.2019"     . ?a)
      ("/Inbox"       . ?i)
      ("/Drafts"       . ?d)
      ("/Sent"        . ?s)))

(setq mu4e-attachment-dir  "~/Downloads")
(define-key mu4e-headers-mode-map (kbd "C-c c") 'org-mu4e-store-and-capture)
(define-key mu4e-view-mode-map    (kbd "C-c c") 'org-mu4e-store-and-capture)

(setq user-mail-address "email_address"
      user-full-name  "Txin")

;;warn me of any deadlines in next 7 days
(setq org-deadline-warning-days 7)
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;normal todo list
(setq org-agenda-todo-ignore-deadlines (quote all))
(setq org-agenda-todo-ignore-scheduled (quote all))
