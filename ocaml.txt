* Comments *
--------------------------------------------------------------------------------
(* hello *)
(*
 * hello 
 * )


* Calling functions *
--------------------------------------------------------------------------------
repeated "hello" 3

repeated (prompt_string "Name please: ") 3

NOTE: brackets around the whole function call, not arguments


* Defining a function *
--------------------------------------------------------------------------------
let average a b =
    (a +. b) /. 2.0

NOTE: + defines as integer addition, +. for float. the last expression
      in a function becomes the result of the function automatically.

Let bindings defining a var
We can also create a variable to name the value of a given expression,
using the let keyword. 

* Basic types *
--------------------------------------------------------------------------------
float: double-precision floating point
string: a string

NOTE: float i +. f

* Extras *
--------------------------------------------------------------------------------
module: every piece of code is wrapped into a module
open: open modules to include functions
type: abstract type
Int.Set module


* Abstract types *
--------------------------------------------------------------------------------
type pair_of_ints = { a : int; b : int; }


* Functors * 
--------------------------------------------------------------------------------
A functor is a module that is parametrized by another module, just
like a function is a value which is parametrized by other values, the
arguments.

Set module

# module Int_set = Set.Make (struct
                               type t = int
                               let compare = compare
                             end);;


* Data Types and Matching *
--------------------------------------------------------------------------------
# type foo =
    | Nothing
    | Int of int
    | Pair of int * int
    | String of string;;

type foo = Nothing | Int of int | Pair of int * int | String of string


* Loops *
--------------------------------------------------------------------------------
# let permute array =
    let length = Array.length array in
    for i = 0 to length - 2 do
       (* pick a j that is after i and before the end of the array *)
       let j = i + 1 + Random.int (length - i - 1) in
       (* Swap i and j *)
       let tmp = array.(i) in
       array.(i) <- array.(j);
       array.(j) <- tmp
    done
  ;;
val permute : 'a array -> unit = <fun>

do ... done


* Notes *
--------------------------------------------------------------------------------
semi-colons are not required in a ocaml file.

annotations:
# let sum_if_true (test : int -> bool) (x : int) (y : int) : int =
     (if test x then x else 0)
     + (if test y then y else 0)
  ;;
val sum_if_true : (int -> bool) -> int -> int -> int = <fun>


* Data Structure * 
--------------------------------------------------------------------------------
Tuple
        let a_tuple = (3, "Three")
List
        let languages = ["Ocaml"; "Perl"; "C"]
        can't mix elements

List.map ~f:String.length languages


* Match *
--------------------------------------------------------------------------------
A match statement is a kind of juiced-up version of the switch
statement found in C and Java.

# let my_favorite_language languages =
    match languages with
    | first :: the_rest -> first
    | [] -> "OCaml" (* A good default! *)
 ;;
val my_favorite_language : string list -> string = <fun>
# my_favorite_language ["English";"Spanish";"French"];;
- : string = "English"
# my_favorite_language [];;
- : string = "OCaml"

# let rec sum l =
    match l with
    | [] -> 0                   (* base case *)
    | hd :: tl -> hd + sum tl   (* inductive case *)
  ;;
val sum : int list -> int = <fun>
# sum [1;2;3];;
- : int = 6


NOTE
:: append


Imperative Programming
--------------------------------------------------------------------------------
pure or functional: the code in doesn't modify variables or values as
part of its execution.

data structures: immutable
imperative programming: where computations are structured as sequences
of instructions that operate by making modifications to the state of the program.

OCaml also has excellent support for imperative programming, including
mutable data structures like arrays and hash tables, and control-flow
constructs like for and while loops.


* Arrays *
--------------------------------------------------------------------------------
# let numbers = [| 1; 2; 3; 4 |];;
val numbers : int array = [|1; 2; 3; 4|]
# numbers.(2) <- 4;;
- : unit = ()
# numbers;;
- : int array = [|1; 2; 4; 4|]

.(i)  refer to an element of an array
<-  modification. 

unit  = () kind of like void in C or Java, a place holder, represents
some side effect


* Mutable Record Fields *
--------------------------------------------------------------------------------
# type running_sum =
   { mutable sum: float;
     mutable sum_sq: float; (* sum of squares *)
     mutable samples: int;
   }
  ;;
type running_sum = {
  mutable sum : float;
  mutable sum_sq : float;
  mutable samples : int;
}


* Refs *
--------------------------------------------------------------------------------
The ref type comes predefined in the standard library, but there's nothing really
special about it. It's just a record type with a single mutable field
called contents:

# let x = { contents = 0 };;
val x : int ref = {contents = 0}
# x.contents <- x.contents + 1;;
- : unit = ()
# x;;
- : int ref = {contents = 1}
